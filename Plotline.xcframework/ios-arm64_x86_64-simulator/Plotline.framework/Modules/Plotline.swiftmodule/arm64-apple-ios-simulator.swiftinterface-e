// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Plotline
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CommonCrypto
import CoreData
import CoreGraphics
import CoreText
import Foundation
import MediaPlayer
@_exported import Plotline
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Prompt : UIKit.UIView {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PlotlinePush : ObjectiveC.NSObject {
  public static let PRIORITY_ACTIVE: Swift.String
  public static let PRIORITY_PASSIVE: Swift.String
  public static let PRIORITY_TIME_SENSITIVE: Swift.String
  @available(iOS 10.0, *)
  public static func enablePush(_ self: any UserNotifications.UNUserNotificationCenterDelegate)
  public static func requestPushPermission()
  public static func incrementPushPermissionCount()
  public static func setPushPermissionCount(count: Swift.Int)
  public static func redirectToSettings()
  public static func setPushToken(deviceToken: Foundation.Data)
  public static func setPushPermissionGranted(granted: Swift.Bool)
  @available(iOS 10.0, *)
  public static func isPushPlotline(request: UserNotifications.UNNotificationRequest) -> Swift.Bool
  public static func getPlotlinePushPermissionCount() -> Swift.Int
  @available(iOS 10.0, *)
  public static func onNotificationReceived(request: UserNotifications.UNNotificationRequest, contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @available(iOS 10.0, *)
  public static func onNotificationReceived(notification: UserNotifications.UNNotification, completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public static func setPlotlinePushPermissionListener(listener: @escaping (Swift.Bool) -> ())
  public func getPlotlinePushPermissionListener() -> ((Swift.Bool) -> ())?
  @available(iOS 10.0, *)
  public static func userNotificationCenter(center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse)
  @available(iOS 10.0, *)
  public static func getActionType(from response: UserNotifications.UNNotificationResponse) -> Swift.String
  public static func getInstance() -> Plotline.PlotlinePush
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Identify {
  public static func identify(attributes: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Queue<T> {
  public func push(value: T)
  public func pop() -> T?
  public func peek() -> T?
  public func empty() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PassthroughView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class StepStyles {
  public var bgColor: Swift.String
  public var borderSize: Swift.Int
  public var borderColor: Swift.String
  public var borderRadius: Swift.Int
  public var fontSize: Swift.Double
  public var fontColor: Swift.String
  public var fontSpacing: Swift.Float
  public var fontWeight: Swift.Int
  public var lineHeight: Swift.Int
  public var textDecoration: [Swift.String]
  public var fontFamily: Swift.String
  public var fontURL: Swift.String
  public init(_ json: [Swift.String : Any])
  @objc deinit
}
public protocol PlotlineScreenshotCallback {
  func onScreenshot(for view: UIKit.UIView, completion: @escaping (UIKit.UIImage?) -> Swift.Void)
}
public protocol PlotlineViewPositionCallback {
  func getAllElements(for view: UIKit.UIView, plotlineScreenshotPositionsCompleteListener: @escaping ([[Swift.String : Any]]) -> ())
  func getViewPosition(for view: UIKit.UIView, fragmentId: Swift.String, viewId: Swift.String, plotlineViewPositionCompleteListener: @escaping (CoreFoundation.CGRect?) -> Swift.Void)
  func areViewsPresent(for view: UIKit.UIView, elementSearchObjects: [Plotline.ElementSearchObject], plotlineViewsPresenceListener: @escaping ([Plotline.ElementSearchObject]) -> ())
  func getView(for view: UIKit.UIView, fragmentId: Swift.String, viewId: Swift.String) -> UIKit.UIView?
}
@_hasMissingDesignatedInitializers public class PlotlineInternal {
  public static let shared: Plotline.PlotlineInternal
  public func setPositionCallback(_ callback: any Plotline.PlotlineViewPositionCallback)
  public func setScreenshotCallback(_ callback: any Plotline.PlotlineScreenshotCallback)
  public func getScreenshotCallback() -> any Plotline.PlotlineScreenshotCallback
  public func getViewPositionCallback() -> any Plotline.PlotlineViewPositionCallback
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PostfixEvaluation {
  public static func evaluatePostfix(exp: [Plotline.Condition]) -> Swift.Bool
  @objc deinit
}
public class PStoryView {
  public var storyId: Swift.String
  public var lastViewedSlideIndex: Swift.Int32
  public var lastUpdated: Swift.Int64
  public init(storyId: Swift.String, lastViewedSlideIndex: Swift.Int32, lastUpdated: Swift.Int64)
  public init(storyView: Plotline.StoryView)
  public init()
  @objc deinit
}
@objc public protocol PlotlineWidgetListener {
  @objc func onWidgetReady(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class PlotlineWidget : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var clientElementId: Swift.String
  @_Concurrency.MainActor(unsafe) public var widgetId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public init(clientElementId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public init(clientElementId: Swift.String, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func setPlotlineWidgetListener(plotlineWidgetListener: any Plotline.PlotlineWidgetListener)
  @objc @_Concurrency.MainActor(unsafe) public init(clientElementId: Swift.String, frame: CoreFoundation.CGRect, plotlineWidgetListener: any Plotline.PlotlineWidgetListener)
  @_Concurrency.MainActor(unsafe) public init(clientElementId: Swift.String, plotlineWidgetListener: any Plotline.PlotlineWidgetListener)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
public class CarouselSettings {
  public var activeSize: Swift.Int
  public var inactiveSize: Swift.Int
  public var activeColor: Swift.String
  public var inactiveColor: Swift.String
  public var indicatorSpacing: Swift.Int
  public var selectedIndex: Swift.Int
  public var indicatorTopMargin: Swift.Int
  public var indicatorBottomMargin: Swift.Int
  public var autoScroll: Swift.Bool
  public var autoScrollDelay: Swift.Int
  public var showIndicators: Swift.Bool
  public init(_ json: [Swift.String : Any])
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CoachRingRenderer : ObjectiveC.NSObject {
  @objc dynamic public class func drawCoachRing(ringColor: UIKit.UIColor = UIColor(red: 0.000, green: 0.387, blue: 0.742, alpha: 0.737), controlRadius: CoreFoundation.CGFloat = 20, controlCenter: CoreFoundation.CGPoint = CGPoint(x: 199, y: 137), ringRadius: CoreFoundation.CGFloat = 144, ringCenter: CoreFoundation.CGPoint = CGPoint(x: 179, y: 171))
  @objc dynamic public class func drawCoachRingEcho(ringEchoColor: UIKit.UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), controlRadius: CoreFoundation.CGFloat = 20, ringRadius: CoreFoundation.CGFloat = 144, ringCenter: CoreFoundation.CGPoint = CGPoint(x: 179, y: 171), echoOpacity: CoreFoundation.CGFloat = 0.491)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EventsBatchUploader {
  @objc deinit
}
public class FloaterSettings {
  public var isFixed: Swift.Bool
  public var showCloseButton: Swift.Bool
  public var closeButtonUrl: Swift.String
  public var closeButtonHeight: Swift.Int
  public var closeButtonWidth: Swift.Int
  public init(_ json: [Swift.String : Any])
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DebugHelper {
  public static func log(_ message: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MultiChoiceMultiCorrect : UIKit.UIView {
  @objc deinit
}
public class EventTask {
  public init(eventNames: Swift.Set<Swift.String>, properties: [Swift.String : Any], codeEvent: Swift.String)
  @available(iOS 10.0, *)
  public func execute()
  @objc deinit
}
public class UpdateWidgetTask {
  public init(widgetsData: [[Swift.String : Any]])
  @available(iOS 10.0, *)
  public func execute()
  @objc deinit
}
public class PWidget {
  public var clientElementId: Swift.String
  public var widgetData: Swift.String
  public var lastUpdated: Swift.Int64
  public init(clientElementId: Swift.String, widgetData: Swift.String, lastUpdated: Swift.Int64)
  public init(widgetData: Plotline.WidgetData)
  public init()
  @objc deinit
}
public class StoryViewUpdateTask {
  public init(storyId: Swift.String, lastViewedSlideIndex: Swift.Int32)
  @available(iOS 10.0, *)
  public func execute()
  @objc deinit
}
public class StorySearchTask {
  public init(storyId: Swift.String, slideId: Swift.String?, widgetDataList: [Plotline.PWidget], storySearchListener: ((Plotline.Widget?, Swift.Int, Swift.Int) -> ())?)
  @available(iOS 10.0, *)
  public func execute()
  @objc deinit
}
public class AttributeTask {
  public init(attributes: [Swift.String : Any])
  public func convertToString(input: Any) -> Swift.String
  @available(iOS 10.0, *)
  public func execute()
  @objc deinit
}
public class PreInitEvent {
  public var eventName: Swift.String
  public var properties: [Swift.String : Any]?
  public init(eventName: Swift.String, properties: [Swift.String : Any]? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class PlotlineGradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CompositeEventsTask {
  public static func getEligibleCompositeEvents(compositeEventsList: [[Swift.String : Any]], properties: [Swift.String : Any]) -> [Swift.String]
  public static func convertToString(input: Any) -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoSettings {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Utils {
  public static var PROPERTY_VALUE_LENGTH_LIMIT: Swift.Int
  public static func currentTimeInMilliSeconds() -> Swift.Int64
  public static func getQueryParameter(url: Foundation.URL, paramName: Swift.String) -> Swift.String?
  public static func sendPlotlineEvent(eventName: Swift.String, properties: [Swift.String : Any], labels: [Swift.String : Any]?)
  public static func parseJSONString(_ jsonString: Swift.String) -> [Swift.String : Any]?
  public static func fetchLiquidAttributes(value: Swift.String) -> [Swift.String]
  public static func replaceAttributes(value: Swift.String, replacements: [Swift.String : Swift.String]) -> Swift.String?
  public static func findButtonAction(overlayLayout: Plotline.StepLayout) -> Plotline.StepAction?
  public static func saveImageToTemporaryFile(_ image: UIKit.UIImage) -> Foundation.URL?
  public static func getScreenOrientation() -> Swift.String
  public static func isIpad() -> Swift.Bool
  public static func cleanTemporaryDirectory()
  public static func removeNonSerializableKeys(from dictionary: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mergeDictionaries(_ originalDict: [Swift.String : Any], _ latestDict: [Swift.String : Any]) -> [Swift.String : Any]
  public static func mergeDictionariesWithArrayValues(_ dict1: [Swift.String : Any], _ dict2: [Swift.String : Any]) -> [Swift.String : Any]
  public static func getCleanedProperties(properties: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func convertObjectToString(jsonObject: [Swift.String : Any]?) -> Swift.String
  @objc deinit
}
public struct CoachRing {
  public var radius: CoreFoundation.CGFloat
  public var center: CoreFoundation.CGPoint
  public let controlCenter: CoreFoundation.CGPoint
  public let controlRadius: CoreFoundation.CGFloat
  public init?(controlCenter c: CoreFoundation.CGPoint, controlRadius cr: CoreFoundation.CGFloat, innerRect ir: CoreFoundation.CGRect, outerRect or: CoreFoundation.CGRect, overlappingAllowed: Swift.Bool = true, excenterShift: CoreFoundation.CGPoint? = nil, excenterRadius: CoreFoundation.CGFloat? = nil)
}
public class StorySettings {
  public static let THUMBNAIL_TYPE_CIRCLE: Swift.String
  public static let THUMBNAIL_TYPE_RECT: Swift.String
  public var unseenBorderUrl: Swift.String
  public var seenBorderUrl: Swift.String
  public var thumbnailType: Swift.String
  public var loadingUrl: Swift.String
  public var closeButtonUrl: Swift.String
  public var padding: [Swift.Double]
  public var storyTitleStyle: Plotline.StepStyles
  public var slideTitleStyle: Plotline.StepStyles
  public var thumbnailSize: Swift.Double
  public var borderSize: Swift.Double
  public var interStorySpacing: Swift.Double
  public var backgroundImageHeight: Swift.Double
  public var backgroundImageWidth: Swift.Double
  public var backgroundImageBorderRadius: Swift.Double
  public init(_ json: [Swift.String : Any])
  public init()
  @objc deinit
}
public protocol FlowStepListener {
  func onShow(currentStepId: Swift.String)
  func endFlow(currentStepId: Swift.String)
  func goToStep(currentStepId: Swift.String, nextStepId: Swift.String)
}
public protocol PlotlineViewListener {
  func show()
  func dismiss()
  func isShowing() -> Swift.Bool
  func onAction(stepId: Swift.String?, action: Swift.String?, effect: Swift.String?, target: Swift.String?, platform: Swift.String?, requireDismiss: Swift.Bool, isDismissed: Swift.Bool)
}
public protocol PlotlineScrollListener : AnyObject {
  func onScroll()
}
public protocol ActionListener {
  func onAction(stepId: Swift.String?, action: Swift.String?, effect: Swift.String?, target: Swift.String?, platform: Swift.String?, requireDismiss: Swift.Bool, isDismissed: Swift.Bool)
}
public protocol PageListener {
  func onPageChange(clientPageId: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class Flows : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var plotlineViewListener: (any Plotline.PlotlineViewListener)?
  public var delayRunTask: Dispatch.DispatchWorkItem?
  public var activeStep: Plotline.FlowStep?
  public var activePosition: CoreFoundation.CGRect?
  public var xPos: Swift.Double
  public var yPos: Swift.Double
  public var button: Plotline.PlotlineFloatingButton?
  public var player: AVFAudio.AVAudioPlayer?
  weak public var videoPlayer: AVFoundation.AVPlayer?
  public func setPosition(newX: Swift.Double, newY: Swift.Double)
  public static func getInstance() -> Plotline.Flows
  public static func getActiveStepId() -> Swift.String
  public static func showScreenshotDialog(userId: Swift.String)
  public static func showFloatingButton(view: UIKit.UIView)
  public static func getElementInView(view: UIKit.UIView, fragmentId: Swift.String, elementId: Swift.String) -> UIKit.UIView?
  public static func getPlotlineViewListener(view: UIKit.UIView, flowStep: Plotline.FlowStep, stepListener: any Plotline.FlowStepListener, plotlineViewListenerReady: @escaping ((any Plotline.PlotlineViewListener)?) -> ())
  public static func showFlow(view: UIKit.UIView, flowStep: Plotline.FlowStep, stepListener: any Plotline.FlowStepListener)
  @objc deinit
}
public class Color {
  public var background: Swift.String
  public var description: Swift.String
  public var title: Swift.String
  public var optionText: Swift.String
  public var optionBackground: Swift.String
  public var optionBorder: Swift.String
  public var buttonBackground: Swift.String
  public var buttonText: Swift.String
  public var progressValue: Swift.String
  public var progressBackground: Swift.String
  public init()
  public func setColor(colors: [Swift.String : Swift.String])
  @objc deinit
}
public class Campaign {
  public var id: Swift.String
  public var triggerEvents: [Swift.String]
  public var userFilter: [Plotline.Condition]
  public var userAttributes: [Swift.String]
  public var campaignType: Swift.String
  public var labels: [Swift.String : Any]?
  public var eventAttributes: [Swift.String : Any]
  public static var CAMPAIGN_STUDY: Swift.String
  public static var CAMPAIGN_FLOW: Swift.String
  public static var CAMPAIGN_JOURNEY: Swift.String
  public static var CAMPAIGN_WIDGET: Swift.String
  public init(json: [Swift.String : Any], id: Swift.String, campaignType: Swift.String)
  public static func checkEligibility(campaigns: [Plotline.Campaign], eligibilityCallback: @escaping ([Plotline.Campaign], [Plotline.Campaign]) -> ())
  @objc deinit
}
public struct MarkInfo {
}
@_hasMissingDesignatedInitializers public class Attributes {
  public func getUserId() -> Swift.String
  public func setUserId(userId: Swift.String)
  public func getAppVersion() -> Swift.String
  public func setAppVersion(appVersion: Swift.String)
  public func getIOSVersion() -> Swift.String
  public func setIOSVersion(iosVersion: Swift.String)
  public func getSDKVersion() -> Swift.String
  public func setSDKVersion(sdkVersion: Swift.String)
  public func getOs() -> Swift.String
  public func setOs(os: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SmileyRating : UIKit.UIView {
  @objc deinit
}
public class InitTask {
  public init(apiKey: Swift.String, userId: Swift.String)
  public func execute()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlotlineFloatingButton : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public var tvViewController: UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) public func setClickListener(listener: @escaping () -> ())
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class CoreDataManager {
  public static let shared: Plotline.CoreDataManager
  public func loadContainer(completion: @escaping (Swift.Bool) -> ())
  public func getEvent(eventName: Swift.String) -> Plotline.PEvent?
  public func insertEvent(eventName: Swift.String, properties: [Swift.String : Any])
  public func updateEvent(eventName: Swift.String, properties: [Swift.String : Any])
  public func getAttribute(attributeName: Swift.String) -> Plotline.PAttribute?
  public func insertAttribute(attributeName: Swift.String, attributeValue: Swift.String)
  public func updateAttribute(attributeName: Swift.String, attributeValue: Swift.String?)
  public func getAttributesWithNames(attributeNameValues: [Swift.String]) -> [Plotline.PAttribute]
  public func getEventsWithName(eventNameValues: [Swift.String]) -> [Plotline.PEvent]
  public func removeAllWidgets()
  public func insertWidgetDataList(widgetDataList: [Plotline.PWidget])
  public func getWidgetData(clientElementId: Swift.String) -> Plotline.PWidget?
  public func getStoryView(storyId: Swift.String) -> Plotline.PStoryView?
  public func insertStoryView(storyId: Swift.String, lastViewedSlideIndex: Swift.Int32)
  public func updateStoryView(storyId: Swift.String, lastViewedSlideIndex: Swift.Int32?)
  public func getStoryViewsWithIds(storyIds: [Swift.String]) -> [Plotline.PStoryView]
  @objc deinit
}
public class Story {
  public var storyId: Swift.String
  public var thumbnailImg: Swift.String
  public var storyTitle: Swift.String
  public var userFilters: [Plotline.Condition]
  public var slidesData: [Plotline.Slide]
  public var backgroundImg: Swift.String
  public init(json: [Swift.String : Any])
  public static func convertStoryJSONArray(array: [[Swift.String : Any]]) -> [Plotline.Story]
  @objc deinit
}
public class PEvent {
  public var eventName: Swift.String
  public var count: Swift.Int16
  public var lastUsed: Swift.Int64
  public var firstUsed: Swift.Int64
  public var timestamps: Swift.String?
  public var properties: Swift.String?
  public init(eventName: Swift.String, count: Swift.Int16, lastUsed: Swift.Int64, firstUsed: Swift.Int64, timestamps: Swift.String, properties: Swift.String)
  public init(event: Plotline.PlotlineEvent)
  public init()
  @objc deinit
}
public class GridSettings {
  public var numRows: Swift.Int
  public var numCols: Swift.Int
  public var hSpacing: Swift.Int
  public var vSpacing: Swift.Int
  public init(_ json: [Swift.String : Any])
  public init()
  @objc deinit
}
public class Journey : Plotline.Campaign {
  public init(json: [Swift.String : Any])
  @objc deinit
}
public class Slide {
  public static let SUB_STORY_IMG: Swift.String
  public static let SUB_STORY_VIDEO: Swift.String
  public var slideId: Swift.String
  public var duration: Swift.Int
  public var slideType: Swift.String
  public var backgroundUrl: Swift.String
  public var overlayLayout: Plotline.StepLayout
  public init(json: [Swift.String : Any])
  public static func convertSlideJSONArray(array: [[Swift.String : Any]]) -> [Plotline.Slide]
  @objc deinit
}
public class FetchWidgetTask {
  public init(clientElementId: Swift.String, widgetDataListener: @escaping ((Plotline.Widget?) -> ()))
  public func execute()
  @objc deinit
}
public protocol InitCallback {
  func onInitialized()
}
@_hasMissingDesignatedInitializers public class Init {
  public static func initialize(apiKey: Swift.String, userId: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Plotline : ObjectiveC.NSObject {
  public static let FRAMEWORK_NATIVE: Swift.String
  public static let FRAMEWORK_REACT_NATIVE: Swift.String
  public static let FRAMEWORK_FLUTTER: Swift.String
  public var studyWindow: UIKit.UIWindow?
  public func getApiKey() -> Swift.String?
  public func setApiKey(sApiKey: Swift.String)
  public func getEndpoint() -> Swift.String
  public func setEndpoint(sEndpoint: Swift.String)
  public func getDefaultAttributes() -> Plotline.Attributes
  public func getsColors() -> Plotline.Color
  public func setsColors(sColors: [Swift.String : Swift.String])
  public func getsLocale() -> Swift.String
  public func setsLocale(sLocale: Swift.String)
  public func getEvents() -> Swift.Set<Swift.String>
  public func getShouldDisablePlotline() -> Swift.Bool
  public func setEvents(sEvents: Swift.Set<Swift.String>)
  public func getMetricEvents() -> Swift.Set<Swift.String>
  public func getShouldEnableScrollDelegates() -> Swift.Bool
  public func setsMetricEvents(sMetricEvents: Swift.Set<Swift.String>)
  public func getMetricEventsType() -> Swift.String
  public func setsMetricEventsType(sMetricEventsType: Swift.String)
  public func setShouldEnableDebug(shouldEnableDebug: Swift.Bool)
  public func getShouldEnableDebug() -> Swift.Bool
  public func getFlowStore() -> Plotline.FlowStore
  public func getJourneyStore() -> Plotline.JourneyStore
  public func isShouldEnableFlows() -> Swift.Bool
  public func setShouldEnableFlows(shouldEnableFlows: Swift.Bool)
  public func getSearchIntervalMillis() -> Swift.Int64
  public func setSearchIntervalMillis(searchIntervalMillis: Swift.Int64)
  public func getCurrentPage() -> Swift.String
  public func setCurrentPage(currentPage: Swift.String)
  public func setCurrentPageListener(pageListener: @escaping (Swift.String) -> ())
  public func getFramework() -> Swift.String
  @objc public static func setPlotlineFramework(framework: Swift.String)
  public func getElementSearchTask() -> Plotline.ElementSearchTask?
  public func setIsTestUser(isTestUser: Swift.Bool)
  public func setTestUserToken(testUserToken: Swift.String)
  public func getIsTestUser() -> Swift.Bool
  public func getTestUserToken() -> Swift.String
  public func getAttributes() -> Swift.Set<Swift.String>
  public func setAttributes(sAttributes: Swift.Set<Swift.String>)
  public func getAttributeMonitors() -> [Plotline.AttributeMonitor]
  public func addAttributeMonitor(_ monitor: Plotline.AttributeMonitor)
  public func getCompositeCodeEventsMap() -> [Swift.String : [[Swift.String : Any]]]
  public func setCompositeCodeEventsMap(sCompositeCodeEventsMap: [Swift.String : [[Swift.String : Any]]])
  public func getStudyStore() -> Plotline.StudyStore
  public func getInitialized() -> Swift.Bool
  public func setInitialized(initialized: Swift.Bool)
  public func getStudyShown() -> Swift.Bool
  public func setStudyShown(studyShown: Swift.Bool)
  public func setStudyLandscapeWidth(studyLandscapeWidth: Swift.Int)
  public func getStudyLandscapeWidth() -> Swift.Int
  public func getWidgetsData() -> [Plotline.PWidget]
  public func setWidgetsData(widgetsData: [Plotline.PWidget])
  public func getWidgetsDataListener() -> (([Plotline.PWidget]) -> ())?
  public func setWidgetsDataListener(widgetsDataListener: (([Plotline.PWidget]) -> ())?)
  public func isShouldRegisterAttributesEvents() -> Swift.Bool
  public func setShouldRegisterAttributesEvents(registerAttributesEvents: Swift.Bool)
  @objc public func registerInitCallback(callback: @escaping () -> ())
  public func getInitCallbacks() -> [() -> ()]
  public func clearCallBacks()
  public func addPreInitEvent(eventName: Swift.String, properties: [Swift.String : Any]?)
  public func getPreInitEvents() -> [Plotline.PreInitEvent]
  public func clearPreInitEvents()
  public func addPreInitAttributes(attributes: [Swift.String : Any])
  public func getPreInitAttributes() -> [Swift.String : Any]
  public func clearPreInitAttributes()
  public func getSwiftUICoordinates() -> [Swift.String : (CoreFoundation.CGRect, Swift.Int64, Swift.Bool)]
  public func addSwiftUICoordinates(label: Swift.String, rect: CoreFoundation.CGRect)
  public func onSwiftUIViewDisappear(label: Swift.String)
  public func onSwiftUIViewAppear(label: Swift.String)
  public func getEventsBatchUploader() -> Plotline.EventsBatchUploader?
  public func setEventsBatchUploader(eventsBatchUploader: Plotline.EventsBatchUploader)
  public func getDecisionTask() -> Plotline.DecisionTask?
  public func setDecisionTask(decisionTask: Plotline.DecisionTask)
  public func setupBackgroundListener()
  public func getPageCaptureUsers() -> [Swift.String : Any]?
  public func setPageCaptureUsers(pageCaptureUsersInput: [Swift.String : Any])
  @objc public func appMovedToBackground()
  public func getPlotlineEventListener() -> ((Swift.String, [Swift.String : Any]) -> ())?
  public func getPlotlineRedirectListener() -> (([Swift.String : Swift.String]) -> ())?
  public func getPlotlineRedirectUrlListener() -> ((Swift.String) -> ())?
  public func setActiveStudy(activeStudy: Plotline.StudyDialog?)
  public func getActiveStudy() -> Plotline.StudyDialog?
  public func setAppInBackground(isAppInBackground: Swift.Bool)
  public func getIsAppInBackground() -> Swift.Bool
  public static func getInstance() -> Plotline.Plotline
  public func initKeys(apiKey: Swift.String, userId: Swift.String)
  public func setDefaultAttributes(appVersion: Swift.String, iosVersion: Swift.String)
  @objc public static func initialize(apiKey: Swift.String, userId: Swift.String)
  @objc public static func initialize(apiKey: Swift.String, userId: Swift.String, endpoint: Swift.String)
  @objc public static func track(eventName: Swift.String)
  @objc public static func track(eventName: Swift.String, properties: [Swift.String : Any])
  @objc public static func identify(attributes: [Swift.String : Any])
  public static func getStudyWindow()
  @objc public static func setShouldEnableScrollDelegates(shouldEnableScrollDelegates: Swift.Bool)
  @objc public static func showMockStudy()
  @objc public static func setLocale(locale: Swift.String)
  @objc public static func setColor(colors: [Swift.String : Swift.String])
  @objc public static func trackPage(pageName: Swift.String)
  @objc public static func initAlong(_ url: Foundation.URL)
  @objc public static func debug(shouldDebug: Swift.Bool)
  @objc public static func getPlotlineWebViewController() -> WebKit.WKUserContentController
  @objc public static func setWebView(webView: WebKit.WKWebView)
  @objc public static func logout()
  @objc public static func notifyScroll()
  @objc public static func setPlotlineEventsListener(listener: @escaping (Swift.String, [Swift.String : Any]) -> ())
  @objc public static func setPlotlineRedirectListener(listener: @escaping ([Swift.String : Swift.String]) -> ())
  @objc public static func setPlotlineRedirectUrlListener(listener: @escaping (Swift.String) -> ())
  @objc public static func showStory(storyId: Swift.String, slideId: Swift.String?)
  @objc public static func setShouldDisablePlotline(shouldDisablePlotline: Swift.Bool)
  @objc deinit
}
@available(iOS 13.0, *)
public struct PLabelInternal : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: Plotline.PLabelInternal.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8Plotline14PLabelInternalV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@available(iOS 13.0, *)
extension SwiftUI.View {
  public func PLabel(_ label: Swift.String) -> some SwiftUI.View
  
}
public class WidgetContent {
  public var storiesData: [Plotline.Story]
  public var storySettings: Plotline.StorySettings
  public var isInitialized: Swift.Bool
  public init(contentObject: [Swift.String : Any])
  @objc deinit
}
public class EligibilityTask {
  public init(campaigns: [Plotline.Campaign], eligibilityCallback: @escaping ([Plotline.Campaign], [Plotline.Campaign]) -> ())
  public func execute()
  public static func compareValues<T>(value1: T, value2: T) -> Swift.Int where T : Swift.Comparable
  public static func compareStrings(s1: Swift.String, s2: Swift.String) -> Swift.Int
  public static func checkEligibilityForCampaign(userFilter: [Plotline.Condition]) -> Swift.Bool
  @objc deinit
}
public class StepLayout {
  public static var DISTRIBUTION_TYPE_EQUAL: Swift.String
  public static var DISTRIBUTION_TYPE_UNEQUAL: Swift.String
  public var isInitialized: Swift.Bool
  public var offsetX: Swift.Int
  public var offsetY: Swift.Int
  public var margin: [Swift.Double]
  public var padding: [Swift.Double]
  public var width: Swift.Double
  public var landscapeWidth: Swift.Int
  public var height: Swift.Double
  public var alignX: Swift.String
  public var alignY: Swift.String
  public var layoutDirection: Swift.String
  public var value: Swift.String
  public var layoutType: Swift.String
  public var styles: Plotline.StepStyles
  public var distribution: Swift.String
  public var layoutWeight: Swift.Int
  public var layouts: [Plotline.StepLayout]
  public var onAction: Plotline.StepAction
  public var carouselSettings: Plotline.CarouselSettings
  public var videoSettings: Plotline.VideoSettings
  public var gridSettings: Plotline.GridSettings
  public var floaterSettings: Plotline.FloaterSettings
  convenience public init()
  public init(_ json: [Swift.String : Any])
  @objc deinit
}
public class JourneyStore {
  public var journeys: [Swift.String : Plotline.Journey]
  public var triggerEvents: [Swift.String : Swift.Set<Swift.String>]
  public init()
  public func removeJourney(journeyId: Swift.String)
  public func addData(journeyData: [[Swift.String : Any]])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MultiChoiceSingleCorrect : UIKit.UIView {
  @objc deinit
}
public class StudyStore {
  public init()
  public func addData(surveyRawData: [[Swift.String : Any]])
  @objc deinit
}
public class PAttribute {
  public var attributeName: Swift.String
  public var attributeValue: Swift.String
  public init(attributeName: Swift.String, attributeValue: Swift.String)
  public init(attribute: Plotline.Attribute)
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Track {
  public static func trackTask(eventName: Swift.String, properties: [Swift.String : Any]?)
  public static func track(eventName: Swift.String)
  public static func track(eventName: Swift.String, properties: [Swift.String : Any])
  public static func checkEligibilityAndTriggerCampaign(campaigns: [Plotline.Campaign], eventName: Swift.String?, eligibleEvents: Swift.Set<Swift.String>, properties: [Swift.String : Any]?)
  public static func triggerCampaign(eligibleCampaigns: [Plotline.Campaign], eventName: Swift.String?, compositeEvents: Swift.Set<Swift.String>?, properties: [Swift.String : Any]?)
  @objc deinit
}
public protocol CoachMarkInfoView : UIKit.UIView {
  var viewSize: CoreFoundation.CGSize { get }
  var centerOffset: CoreFoundation.CGPoint { get }
  func setText(title: Swift.String, fontFamily: Swift.String, fontSize: CoreFoundation.CGFloat, textDecoration: [Swift.String], fontURL: Swift.String)
  func setInfo(info: Swift.String, fontFamily: Swift.String, fontSize: CoreFoundation.CGFloat, textDecoration: [Swift.String], fontURL: Swift.String)
  func setTitleColor(color: UIKit.UIColor)
  func setInfoColor(color: UIKit.UIColor)
}
public class Flow : Plotline.Campaign {
  public var journeyId: Swift.String?
  public var clientElementId: Swift.String
  public var clientFragmentId: Swift.String
  public var flowType: Swift.String
  public var marginFilter: [CoreFoundation.CGFloat]?
  public var shouldSendOnlyTrue: Swift.Bool
  public static var FLOW_TYPE_PAGE: Swift.String
  public static var FLOW_TYPE_ELEMENT: Swift.String
  public static var FLOW_TYPE_DECISION: Swift.String
  public init(json: [Swift.String : Any])
  @objc deinit
}
public class Condition {
  public var type: Swift.String?
  public var key: Swift.String?
  public var aggregate: Swift.String?
  public var relation: Swift.String?
  public var value: Swift.String?
  public var pOperator: Swift.String?
  public var timerange: Swift.Int64?
  public var refevent: Swift.String?
  public static let VAL_ATTRIBUTE: Swift.String
  public static let VAL_EVENT: Swift.String
  public static let VAL_OPERATOR: Swift.String
  public static let VAL_TIMESTAMP: Swift.String
  public static let VAL_PROPERTY: Swift.String
  public init(condition: [Swift.String : Any])
  public init(type: Swift.String, key: Swift.String, aggregate: Swift.String, relation: Swift.String, value: Swift.String, pOperator: Swift.String)
  public static func convertConditionJSONArray(array: [[Swift.String : Any]]) -> [Plotline.Condition]
  @objc deinit
}
public class FlowStore {
  public var flows: [Swift.String : Plotline.Flow] {
    get
    set
  }
  public var triggerEvents: [Swift.String : Swift.Set<Swift.String>]
  public var activeFlowArray: [Plotline.FlowStep]
  public var activeFlowIndex: Swift.Int
  public var activeFlowId: Swift.String
  public var activeJourneyId: Swift.String?
  public init()
  public func peekActiveFlowStep() -> Plotline.FlowStep?
  public func popActiveFlowStep() -> Plotline.FlowStep?
  public func clearActiveFlowArray()
  public func removeFlow(flowId: Swift.String)
  public func addData(flowData: [[Swift.String : Any]])
  public func addQueue(flowId: Swift.String, journeyId: Swift.String?, flowStepsData: [Any])
  public func actOnQueue(compositeTriggerEvents: Swift.Set<Swift.String>?)
  public func showFlowStep(view: UIKit.UIView)
  @_hasMissingDesignatedInitializers public class FlowStepListenerImpl : Plotline.FlowStepListener {
    public func onShow(currentStepId: Swift.String)
    public func endFlow(currentStepId: Swift.String)
    public func goToStep(currentStepId: Swift.String, nextStepId: Swift.String)
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DummyClass {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OpenText : UIKit.UIView, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textbox: UIKit.UITextView)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecisionTask {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Rating : UIKit.UIView {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FontHelper {
  public var fontResMapping: [Swift.String : UIKit.UIFont?]
  public var fontMapping: [Swift.String : Swift.String?]
  public static func downloadAndRegisterFont(from urlString: Swift.String, completion: @escaping (UIKit.UIFont?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public class Study : Plotline.Campaign {
  public var studyId: Swift.String
  public init(studyObject: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PlotlineNetworkHelper {
  public static func getHeaders() -> [Swift.String : Any]
  public static func getHeadersWhenInBackground() -> [Swift.String : Any]
  public static func initialize(callback: @escaping ([Swift.String : Any]) -> Swift.Void)
  public static func registerEvent(eventName: Swift.String, propertyKeys: [Swift.String]?)
  public static func registerAttributes(attributes: [Swift.String])
  public static func triggerCampaign(eligibleCampaigns: [Plotline.Campaign], triggerEvent: Swift.String?, properties: [Swift.String : Any]?, callback: @escaping ([Swift.String : Any]) -> ())
  public static func sendResponse(studyId: Swift.String, questionId: Swift.String, answer: [Swift.String], isCompleted: Swift.Bool)
  public static func uploadScreenshotImage(clientPageId: Swift.String, imgFile: Swift.String, callback: @escaping (Swift.String) -> ())
  public static func registerPage(imgPath: Swift.String, clientPageId: Swift.String, pageHeight: Swift.Int, pageWidth: Swift.Int, pageElements: [[Swift.String : Any]], pageOrientation: Swift.String)
  public static func saveFlowAction(flowId: Swift.String, stepId: Swift.String?, journeyId: Swift.String?, actionType: Swift.String, action: Swift.String, isCompleted: Swift.Bool, actionProperties: Swift.String? = nil)
  public static func saveStoryAction(storyId: Swift.String, slideId: Swift.String, actionType: Swift.String, action: Swift.String, isCompleted: Swift.Bool)
  public static func trackEvent(eventsDataList: [[Swift.String : Any]])
  public static func registerToken(token: Swift.String)
  public static func savePushNotificationAction(campaignId: Swift.String, notificationId: Swift.String, actionType: Swift.String)
  public static func setPushPermissionGranted(granted: Swift.Bool)
  public static func removePageCaptureUser()
  @objc deinit
}
public class StepAction {
  public var action: Swift.String
  public var effect: Swift.String
  public var target: Swift.String
  public var platform: Swift.String
  convenience public init()
  public init(_ json: [Swift.String : Any])
  @objc deinit
}
public class StoryViewFetchTask {
  public init(stories: [Plotline.Story], storyViewedDataListener: @escaping (([Swift.String : Swift.Int32]?) -> ()))
  public func execute()
  @objc deinit
}
public class QuestionModal {
  public func getQuestionLayout() -> UIKit.UIView?
  public init(questionIndex: Swift.Int, questions: [Plotline.Question], answerListener: any Plotline.AnswerListener, hidePlotline: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AttributeMonitor {
  @objc deinit
}
public enum PopoverOption {
  case arrowSize(CoreFoundation.CGSize)
  case animationIn(Foundation.TimeInterval)
  case animationOut(Foundation.TimeInterval)
  case cornerRadius(CoreFoundation.CGFloat)
  case sideEdge(CoreFoundation.CGFloat)
  case blackOverlayColor(UIKit.UIColor)
  case overlayBlur(UIKit.UIBlurEffect.Style)
  case type(Plotline.ArrowDirection)
  case color(UIKit.UIColor)
  case dismissOnBlackOverlayTap(Swift.Bool)
  case showBlackOverlay(Swift.Bool)
  case springDamping(CoreFoundation.CGFloat)
  case initialSpringVelocity(CoreFoundation.CGFloat)
  case sideOffset(CoreFoundation.CGFloat)
  case borderColor(UIKit.UIColor)
}
@objc public enum ArrowDirection : Swift.Int {
  case up
  case down
  case left
  case right
  case auto
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class PlotlineTooltipView : Plotline.PassthroughView, Plotline.PlotlineViewListener {
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func isShowing() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func onAction(stepId: Swift.String?, action: Swift.String?, effect: Swift.String?, target: Swift.String?, platform: Swift.String?, requireDismiss: Swift.Bool, isDismissed: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var arrowSize: CoreFoundation.CGSize
  @objc @_Concurrency.MainActor(unsafe) open var animationIn: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) open var animationOut: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var sideEdge: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var popoverType: Plotline.ArrowDirection
  @objc @_Concurrency.MainActor(unsafe) open var blackOverlayColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var overlayBlur: UIKit.UIBlurEffect?
  @objc @_Concurrency.MainActor(unsafe) open var popoverColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var dismissOnBlackOverlayTap: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var showBlackOverlay: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var highlightFromView: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var highlightCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var springDamping: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var initialSpringVelocity: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var sideOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open var arrowPoint: CoreFoundation.CGPoint?
  @_Concurrency.MainActor(unsafe) open var mFlowStep: Plotline.FlowStep?
  @objc @_Concurrency.MainActor(unsafe) open var mDismissOnOutsideTouch: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var mDismissOnInsideTouch: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var mActionListener: (any Plotline.ActionListener)?
  @_Concurrency.MainActor(unsafe) open var mAnchorRect: CoreFoundation.CGRect?
  @objc @_Concurrency.MainActor(unsafe) open var willShowHandler: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var willDismissHandler: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var didShowHandler: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var didDismissHandler: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public var blackOverlay: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(builder: Plotline.PlotlineTooltipView.Builder)
  @objc @_Concurrency.MainActor(unsafe) public init(showHandler: (() -> ())?, dismissHandler: (() -> ())?)
  @_Concurrency.MainActor(unsafe) public init(options: [Plotline.PopoverOption]?, showHandler: (() -> ())? = nil, dismissHandler: (() -> ())? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func showAsDialog(_ contentView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func showAsDialog(_ contentView: UIKit.UIView, inView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func show(_ contentView: UIKit.UIView, fromView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func show(_ contentView: UIKit.UIView, fromView: UIKit.UIView, inView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func show(_ contentView: UIKit.UIView, point: CoreFoundation.CGPoint)
  @objc @_Concurrency.MainActor(unsafe) open func show(_ contentView: UIKit.UIView, point: CoreFoundation.CGPoint, inView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityPerformEscape() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func onOutsideTouch()
  @objc @_Concurrency.MainActor(unsafe) open func onInsideTouch()
  @objc @_Concurrency.MainActor(unsafe) open func dismiss()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  public class Builder {
    public init(rootView: UIKit.UIView, builtView: UIKit.UIView, anchorRect: CoreFoundation.CGRect)
    public func build() -> Plotline.PlotlineTooltipView
    public func flowStep(flowStep: Plotline.FlowStep) -> Plotline.PlotlineTooltipView.Builder
    public func actionListener(actionListener: any Plotline.ActionListener) -> Plotline.PlotlineTooltipView.Builder
    @objc deinit
  }
  @objc deinit
}
public protocol AnswerListener {
  func onAnswer(questionType: Swift.String, questionIndex: Swift.Int, isDone: Swift.Bool, answer: [Swift.String])
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StudyDialog : UIKit.UIView, Plotline.AnswerListener {
  @_Concurrency.MainActor(unsafe) public func setQuestions(studyId: Swift.String, questionList: [Plotline.Question], showThankYouScreen: Swift.Bool, thankYouScreenText: Swift.String, hidePlotline: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func onAnswer(questionType: Swift.String, questionIndex: Swift.Int, isDone: Swift.Bool, answer: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) public static func fetchImageResourcesList(_ questions: [Plotline.Question]) -> [Swift.String]
  @objc deinit
}
public class ScreenshotTask {
  public init(listener: @escaping () -> (), screenImage: UIKit.UIImage, elements: [[Swift.String : Any]])
  public func execute()
  public static func getAllElements(view: UIKit.UIView) -> [[Swift.String : Any]]
  @objc deinit
}
public class FlowStep {
  public var isInitialized: Swift.Bool
  public var stepId: Swift.String
  public var stepType: Swift.String
  public var triggerEvents: [Swift.String]
  public var clientElementId: Swift.String
  public var clientFragmentId: Swift.String
  public var marginFilter: [CoreFoundation.CGFloat]?
  public var delay: Swift.Int
  public var dismissAfter: Swift.Int
  public var showBackdrop: Swift.Bool
  public var backdropColor: Swift.String
  public var showCloseButton: Swift.Bool
  public var closeButtonColor: Swift.String
  public var closeButtonSize: Swift.Int
  public var closeButtonPadding: Swift.Int
  public var position: Swift.String
  public var transitionIn: Swift.String
  public var transitionOut: Swift.String
  public var arrowWidth: Swift.Int
  public var arrowHeight: Swift.Int
  public var layout: Plotline.StepLayout
  public var showAnimation: Swift.Bool
  public var shouldDisableHighlightedButton: Swift.Bool
  public var spotlightRadius: Swift.Int
  public var spotlightPadding: Swift.Int
  public var audioUrl: Swift.String
  public var audioRepeat: Swift.Bool
  public var isAudioCorrupted: Swift.Bool
  public var ttl: Swift.Int64
  public static var PLOTLINE_AUDIO_PREFIX: Swift.String
  public static var PLOTLINE_VIDEO_PREFIX: Swift.String
  public static var TRANSITION_FADE: Swift.String
  public static var TRANSITION_SCALE: Swift.String
  public static var TRANSITION_NONE: Swift.String
  public static var TYPE_TOOLTIP: Swift.String
  public static var TYPE_MODAL: Swift.String
  public static var TYPE_BADGE: Swift.String
  public static var TYPE_BOTTOMSHEET: Swift.String
  public static var TYPE_COACHMARK: Swift.String
  public static var TYPE_SPOTLIGHT: Swift.String
  public static var TYPE_BANNER: Swift.String
  public static var TYPE_FLOATER: Swift.String
  public static var TYPE_PIPVIDEO: Swift.String
  public static var TYPE_WIDGET: Swift.String
  public static var TYPE_FULLPAGEMODAL: Swift.String
  public static var TYPE_FULLPAGECONTENT: Swift.String
  public static var TYPES_ELEMENT: [Swift.String]
  public init(json: [Swift.String : Any])
  @objc deinit
}
public class Question {
  public var questionId: Swift.String?
  public var questionType: Swift.String?
  public var image: [Swift.String : Any]?
  public var options: [[Swift.String : Any]]?
  public var question: Swift.String?
  public var description: Swift.String?
  public var skipLogic: [[Swift.String : Any]]?
  public var buttonText: Swift.String?
  public var textPlaceholder: Swift.String?
  public var scaleRangeStart: Swift.Int?
  public var scaleRangeEnd: Swift.Int?
  public var lowLabel: Swift.String?
  public var highLabel: Swift.String?
  public var requestPermission: Swift.Bool?
  public var maxRecordingTime: Swift.Int?
  public var isColoured: Swift.Bool
  public var promoterColor: Swift.String
  public var passiveColor: Swift.String
  public var detractorColor: Swift.String
  public static let TYPE_MCQ_SINGLE: Swift.String
  public static let TYPE_MCQ_MULTIPLE: Swift.String
  public static let TYPE_OPEN_TEXT: Swift.String
  public static let TYPE_PROMPT: Swift.String
  public static let TYPE_RATING: Swift.String
  public static let TYPE_SMILEY_RATING: Swift.String
  public init(questionId: Swift.String, questionType: Swift.String, options: [[Swift.String : Any]], question: Swift.String, description: Swift.String, skipLogic: [[Swift.String : Any]], buttonText: Swift.String, textPlaceholder: Swift.String, scaleRangeStart: Swift.Int, scaleRangeEnd: Swift.Int, lowLabel: Swift.String, highLabel: Swift.String, requestPermission: Swift.Bool, maxRecordingTime: Swift.Int)
  public static func getQuestions(questions: [[Swift.String : Any]]) -> [Plotline.Question]
  public static func getMockQuestions() -> [Plotline.Question]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ThankYouView : UIKit.UIView {
  @objc deinit
}
public class Widget : Plotline.Campaign {
  public static let WIDGET_TYPE_DEFAULT: Swift.String
  public static let WIDGET_TYPE_STORIES: Swift.String
  public var clientElementId: Swift.String
  public var stepData: Plotline.FlowStep
  public var widgetData: [Swift.String : Any]
  public var widgetType: Swift.String
  public var ttl: (Swift.Int64)
  public var content: Plotline.WidgetContent
  public init(json: [Swift.String : Any])
  @objc deinit
}
public class ElementSearchObject {
  public var flowId: Swift.String
  public var clientPageId: Swift.String
  public var clientFragmentId: Swift.String
  public var clientElementId: Swift.String
  public var isActiveFlow: Swift.Bool
  public var marginFilter: [CoreFoundation.CGFloat]?
  public init(flowId: Swift.String, clientPageId: Swift.String, clientFragmentId: Swift.String, clientElementId: Swift.String)
  public init(flowId: Swift.String, clientPageId: Swift.String, clientFragmentId: Swift.String, clientElementId: Swift.String, marginFilter: [CoreFoundation.CGFloat]?)
  public init?(json: [Swift.String : Any])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ElementSearchTask : ObjectiveC.NSObject, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) public func clearElementsCompleted()
  @_Concurrency.MainActor(unsafe) public func notifyScroll()
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) public func setPlotlineScrollListener(listener: (any Plotline.PlotlineScrollListener)?)
  @_Concurrency.MainActor(unsafe) public func getCurrentViewController() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func cleanAssignScrollDelegates(currentVC: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func intervalFunction()
  @_Concurrency.MainActor(unsafe) public func runNextLoop()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Attribute) public class Attribute : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Plotline.Attribute {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Plotline.Attribute>
  @objc @NSManaged dynamic public var attributeName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeValue: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(PlotlineEvent) public class PlotlineEvent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Plotline.PlotlineEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Plotline.PlotlineEvent>
  @objc @NSManaged dynamic public var count: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var firstUsed: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastUsed: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var properties: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamps: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(StoryView) public class StoryView : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Plotline.StoryView {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Plotline.StoryView>
  @objc @NSManaged dynamic public var lastUpdated: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastViewedSlideIndex: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var storyId: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(WidgetData) public class WidgetData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Plotline.WidgetData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Plotline.WidgetData>
  @objc @NSManaged dynamic public var clientElementId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastUpdated: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var widgetData: Swift.String? {
    @objc get
    @objc set
  }
}
extension Plotline.ArrowDirection : Swift.Equatable {}
extension Plotline.ArrowDirection : Swift.Hashable {}
extension Plotline.ArrowDirection : Swift.RawRepresentable {}
